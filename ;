#include "main.h"
#include "raylib.h"
#include <assert.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#define VIRTUAL_WIDTH 800
#define VIRTUAL_HEIGHT 450
#define TILE_WIDTH 85
#define TILE_HEIGHT 100

bool DEBUG = 1;

void test(char *text) {
  DrawText(text, GetScreenWidth() / 2, GetScreenHeight() / 2, 100, RED);
}

void draw_tile(Entity *tile, float scale) {
  const char *text;
  if (tile->state == FaceUp || tile->state == Scored) {
    text = tile->tile_value;
  } else {
    text = "?";
  }
  int font_size = 90;
  int text_width = MeasureText(text, font_size);
  int text_height = font_size;
  float rect_center_x = tile->pos.x + tile->width / 2.0f;
  float rect_center_y = tile->pos.y + tile->height / 2.0f;
  float textX = rect_center_x - text_width / 2.0f;
  float textY = rect_center_y - text_height / 2.0f;
  if (tile->state == FaceUp || tile->state == Scored) {
    DrawRectangle(tile->pos.x * scale, tile->pos.y * scale, tile->width * scale,
                  tile->height * scale, WHITE);
    DrawText(text, textX * scale, textY * scale, font_size * scale, ORANGE);
  } else {
    DrawRectangle(tile->pos.x * scale, tile->pos.y * scale, tile->width * scale,
                  tile->height * scale, DARKGREEN);
    DrawText(text, textX * scale, textY * scale, font_size * scale, ORANGE);
  }
  DrawRectangleLinesEx(
      (Rectangle){
          .x = tile->pos.x * scale,
          .y = tile->pos.y * scale,
          .width = tile->width * scale,
          .height = tile->height * scale,
      },
      3, ORANGE);
}

int main(void) {
  InitWindow(1920, 1080, "Tradebinder");
  SetTargetFPS(60);

  GameState game_state = {.faceup_tile_count = 0,
                          .prev_flipped_tile_index = 103,
                          .current_flipped_tile_index = 103};

  Entity tiles[8];
  int tiles_length = 8;
  for (int i = 0; i < tiles_length; i++) {
    int tile_gap = 25;
    tiles[i] = (Entity){
        .pos =
            (Vector2){.x = (10 + i * (TILE_WIDTH + tile_gap)) + TILE_WIDTH * 2,
                      .y = (float)VIRTUAL_HEIGHT / 2.0f - TILE_HEIGHT},
        .width = TILE_WIDTH,
        .height = TILE_HEIGHT,
        .state = FaceDown};

    if (tiles[i].pos.x > (VIRTUAL_WIDTH / 3.0f) * 2) {
      tiles[i].pos.y += 100;
    }

    int err = snprintf(tiles[i].tile_value, sizeof(tiles[i].tile_value), "%d",
                       (i % 2));
    assert(err);
  }

  while (!WindowShouldClose()) {
    float dt = GetFrameTime();
    // Screen scaling
    int screen_width = GetScreenWidth();
    int screen_height = GetScreenHeight();
    float delta = GetFrameTime();
    float scale_x = (float)screen_width / VIRTUAL_WIDTH;
    float scale_y = (float)screen_height / VIRTUAL_HEIGHT;
    float scale = (scale_x < scale_y) ? scale_x : scale_y;

    // --------------- //
    // ---- Input ---- //
    // --------------- //
    if (IsKeyPressed(KEY_O)) {
      DEBUG = !DEBUG;
    }

    // ---------------- //
    // ---- Update ---- //
    // ---------------- //
    if (game_state.faceup_tile_count == 2) {
      sleep(1);
      // for (int i = 0; i < tiles_length; i++) {
      //   Entity *tile = &tiles[i];
      //   tile->state = FaceDown;
      // }

      char *prev_tile = tiles[game_state.prev_flipped_tile_index].tile_value;
      char *current_tile =
          tiles[game_state.current_flipped_tile_index].tile_value;
      if (strcmp(prev_tile, current_tile) == 0) {
        tiles[game_state.prev_flipped_tile_index].state = Scored;
        tiles[game_state.current_flipped_tile_index].state = Scored;
        game_state.score++;
      } else {
        tiles[game_state.prev_flipped_tile_index].state = FaceDown;
        tiles[game_state.current_flipped_tile_index].state = FaceDown;
      }
      game_state.prev_flipped_tile_index = 103;
      game_state.current_flipped_tile_index = 103;
      game_state.faceup_tile_count = 0;
    }

    if (IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
      for (int i = 0; i < tiles_length; i++) {
        Entity *tile = &tiles[i];
        Vector2 mouse_pos = GetMousePosition();
        Rectangle rect = {tile->pos.x * scale, tile->pos.y * scale,
                          tile->width * scale, tile->height * scale};
        if (CheckCollisionPointRec(mouse_pos, rect) &&
            tile->state == FaceDown) {
          tile->state = FaceUp;
          game_state.faceup_tile_count++;

          if (game_state.prev_flipped_tile_index == 103) {
            game_state.prev_flipped_tile_index = i;
          } else {
            game_state.current_flipped_tile_index = i;
          }
        }
      }
    };

    // ---------------- //
    // ----- Draw ----- //
    // ---------------- //
    BeginDrawing();
    ClearBackground(DARKBLUE);

    for (int i = 0; i < tiles_length; i++) {
      draw_tile(&tiles[i], scale);
    }

    // DEBUG //
    if (DEBUG) {
      int font_size = 25 * scale;
      const char *score = TextFormat("Score: %i", game_state.score);
      DrawText(score, 20 * scale, 0 * scale, font_size, YELLOW);
      const char *faceup_tile_count =
          TextFormat("FaceUp Count: %i", game_state.faceup_tile_count);
      DrawText(faceup_tile_count, 20 * scale, 40 * scale, font_size, YELLOW);
      const char *prev =
          TextFormat("Prev: %i", game_state.prev_flipped_tile_index);
      DrawText(prev, 20 * scale, 60 * scale, font_size, YELLOW);
      const char *current =
          TextFormat("Curr: %i", game_state.current_flipped_tile_index);
      DrawText(current, 20 * scale, 80 * scale, font_size, YELLOW);
    }

    EndDrawing();
  }

  CloseWindow();
  return 0;
}
